#include <MysqlDbPool.hpp>

class User : public DbEntity
{
public:
	string m_name;
	int m_age;

public:
	void bindMember()
	{
		bindTableName("user");

		bindFeild("name", &m_name);
		bindFeild("age", &m_age);
	}
};


MysqlDbPool* mysqlDbPool;

void dbPoolTestFun(int threadId)
{
	int count = 0;
	while (count < 1000)
	{
		MysqlDb* mysqlDb = mysqlDbPool->waitGetConnection();
		//SmartMysqlDbPtr mysqlDb = mysqlDbPool->waitGetSmartCon();

		cout << "线程" << threadId << " 获得使用权" << endl;

		User user;
		user.m_name = std::to_string(threadId * count);
		mysqlDb->insertObject(user);

		Sleep(10);

		mysqlDbPool->releaseConnection(mysqlDb);


		count++;
	}
}



DbInfo dbInfo;
	dbInfo.m_host = "127.0.0.1";
	dbInfo.m_port = 3306;
	dbInfo.m_userName = "root";
	dbInfo.m_password = "123456";
	dbInfo.m_dbName = "test";

	mysqlDbPool = new MysqlDbPool(2, dbInfo);

	thread testThread1(dbPoolTestFun, 1);
	thread testThread2(dbPoolTestFun, 2);
	thread testThread3(dbPoolTestFun, 3);
	thread testThread4(dbPoolTestFun, 4);
	thread testThread5(dbPoolTestFun, 5);
	thread testThread6(dbPoolTestFun, 6);
	thread testThread7(dbPoolTestFun, 7);

	testThread1.join();
	testThread2.join();
	testThread3.join();
	testThread4.join();
	testThread5.join();
	testThread6.join();
	testThread7.join();


	delete mysqlDbPool;


说明:
    1  该样例 使用 智能指针 SmartMysqlDbPtr会造成线程老是占用着cpu时间片。 原因不明。 而手动释放链接线程获取链接的机会比较均等。

    2  当连接池链接数设置5个， 线程7个的时候。 智能指针 SmartMysqlDbPtr 获取到链接的机会就比较平均了。

    3  当线程数远大于链接池个数时，推荐使用 waitGetConnection() 手动释放链接。 而连接池个数比较接近线程数时，如果不极致追求效率，
        推荐使用 waitGetSmartCon()， 毕竟花了很大力气实现这个。。。。。。。。。现在想起来有点鸡肋。
       
        大家还是尽量使用 waitGetConnection() 吧， 效率可控，能够尽早的释放数据库链接资源给其他线程使用。

    4 一开始还担心数据库链接没释放，你们就把连接池释放了，会造成内存泄漏。 其实想想你们把连接池释放了，还释放啥资源，释放就崩溃。
       到时候你们自己delete吧。，，，，，，，，，，，，， SmartMysqlDbPtr大家别慌我有连接池判空操作。看来自动释放还是有用。



